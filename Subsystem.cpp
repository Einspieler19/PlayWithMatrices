// ==============================================================
// File generated by Xilinx Model Composer(TM)
// Version: 2022.2
//  
// (c) Copyright 2017 - 2022 Xilinx, Inc. All rights reserved.
//  
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//  
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//  
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//  
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// ==============================================================


#include <xmc_hls/hls_qr_inverse.h>
#include <xmcArithBasics.h>
#include <xmcArithDivide.h>
#include <xmcArithSatBasics.h>
#include <StreamAdapters.h>
#include "Subsystem.h"


void printStreamElements1(hls::stream<data_QRInv>& stream) {
    // 逐个读取并打印每个元素
    while (!stream.empty()) {
    	data_QRInv data = stream.read();
        std::cout << data << " ";
    }
    std::cout << std::endl;
}


void
My_Hermitian(data_QRInv In1[ROWS_1][COLS_1], data_QRInv Out1[ROWS_1][COLS_1])
{
    #pragma HLS inline
    //#pragma HLS stream variable=Constant_out1 depth=ROWS_1
 	for (int i = 0; i < ROWS_1; i++) {
 	    for (int j = 0; j < COLS_1; j++) {
 	    	Out1[j][i] = std::conj(In1[i][j]);
 	    }
    }
}


void
My_MatrixMult(data_QRInv In1[ROWS_1][COLS_1], data_QRInv In2[ROWS_2][COLS_2], data_QRInv Out1[ROWS_1][COLS_1])
{
    for (int i = 0; i < ROWS_1; i++) {
 	    for (int j = 0; j < COLS_2; j++) {
 	    	MATRIX_T ABij = 0;
 	    	product: for(int k = 0; k < ROWS_2; ++k) {
 	    		ABij += In1[i][k] * In2[k][j];
// 	    		A ------  times B |
 	    	}
			Out1[i][j] = ABij;
 	    }
    }
}


void
p30_QR_Inverse(data_QRInv in1[ROWS_1][COLS_1], data_QRInv out1[ROWS_1][COLS_1])
{
    int32_t QR_Inverse;
    hls::qr_inverse<ROWS_1,data_QRInv,data_QRInv >(in1, out1, QR_Inverse);
}

void
Subsystem_core(data_QRInv In1[ROWS_1][COLS_1], data_QRInv Out1[ROWS_1][COLS_1])
{
    #pragma HLS inline
    //#pragma HLS stream variable=Constant_out1 depth=ROWS_1
//    My_Hermitian(In1, Out1);
    p30_QR_Inverse(In1, Out1);
}

/**
 * @brief Subsystem
 * @param Out1 direction=output protocol=Default length=9
 */

void
Subsystem(hls::stream< data_QRInv >& In1,hls::stream< data_QRInv >& Out1)
{
    #pragma HLS INTERFACE axis port=Out1
    #pragma HLS INTERFACE ap_ctrl_hs port=return
    #pragma HLS dataflow

    data_QRInv Subsystem_core_Out1[ROWS_1][COLS_1];
    #pragma HLS stream variable=Subsystem_core_Out1 depth=ROWS_1
    data_QRInv Subsystem_core_In1[ROWS_1][COLS_1];
    #pragma HLS stream variable=Subsystem_core_In1 depth=ROWS_1

    xmc::StreamAdapter2d<ROWS_1, COLS_1>::readStream(In1, Subsystem_core_In1);
    // 把流写到In1里

    printStreamElements1(In1);
    Subsystem_core(Subsystem_core_In1, Subsystem_core_Out1);

    // 调用求逆

    xmc::StreamAdapter2d<ROWS_1, COLS_1>::writeStream(Out1, Subsystem_core_Out1);

    //把 Out1 写到 流 里
    //printStreamElements1(Out1);



}


